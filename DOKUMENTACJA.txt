Kacper Świderek grupa PS:19 
Biblioteka
Jest to program do zarządzania biblioteką, można w nim dodawać,edytować i usuwać książki oraz wyświetlać posortowane według 3 kryteriów,
oprócz usuwania pojedyńczej ksiązki można też usunąć książki względem autora i roku, nie można usunąć wypożyczonej książki.
Można także dodawać,edytować i usuwać klienta. Nie można usunąć klienta który ma wypożyczoną ksiązkę.Wyświetlać można posortowanych 
wszystkich lub według początku nazwiska. Można dodać losową książkę oraz losowego klienta.
Wypożyczenie ksiązki polega na podaniu numeru książki oraz numeru klienta i zapisaniu tego w pliku z wypożyczeniami, struktura wypozyczen
służy jako tabela relacyjna,czyli posiada numer wypozyczenia,nr ksiazki i nr klienta.Można dodać klienta w trakcie wypożyczania książki,
wyświetlić oraz usunąć wypożyczenia.

Struktury zapisywane są w plikach binarnych.Przy odczytywaniu po jednym elemencie dołączane są do nowej listy.

struct ksiazki {
    unsigned int nr_isbn[13];
    int nr_katalogowy, dostepnosc, data_wydania;
    char autor_nazwisko[MAX], autor_imie[MAX], tytul[MAX], kategoria[MAX], wydawnictwo[MAX];
    struct ksiazki *next;
};

struct klienci {
    int index, ilosc;
    char nazwisko[MAX], imie[MAX], adres[MAX], telefon[MAX];
    struct klienci *next;
};

struct wypozyczenia {
    int numer, index_ksiazki, index_klienta;
    struct wypozyczenia *next;
};

void dodajKsiazke(int n), int dodajKlienta(int n)
Te funkcje są odpowiedzialne za dodawanie książek lub klientów, parametr n służy do określenia czy dodawany element ma być losowy czy
wpisany przez użytkownika.Jeśli plik nie jest pusty funkcja wczytuje z niego klientów/książki i szuka w nich maksymalnego indeksu i 
przypisuje go do nowego elementu po czym dodaje go w odpowiednie miejsce aby lista była posortowana i zapisuje do pliku.

struct klienci *losowyKlient(), struct ksiazki *losowaKsiazka()
Z gotowych danych losują poszczegulne dane i przypisują je do elemenu który jest zwracany.

struct ksiazki *wstawPosortowane(struct ksiazki *l, struct ksiazki *ks), struct klienci *wstawPosortowanychKlientow(struct klienci *l, struct klienci *kl)
Te funkcje wstawiają na odpowiednie miejsce listy z parametru element z drugiego elementu.Lista jest posorotwana po nazwiksu(autora/klienta).

void wyswietlKlientow(int n),void wyswietlKsiazki(int n),void wyswietlWypozyczenia(),void wyswietlKlienta(struct klienci *k),void wyswietlK(struct ksiazki *k)
Funkcje służą do wyświetlania poszczególnych list, parametr 'n' w dwóch pierwszych funkcjach odpowiada za sortowanie.

void edytujKsiazke(),void edytujKlienta()
służy do edycji elementów, po podaniu numeru elemntu, wyboru danych do zmiany i nowej wartości jest on zmieniany i
lista jest zapisywana do pliku.

struct klienci *utworzKlienta(),struct ksiazki *utworzKsiazke()
służą do ręcznego dodania książki/klienta, wprowadzone dane są sprawdzane czy nie są puste i czy mają właściwy format.

int is_positive_number(char *s, int len)
sprawdza czy numer isbn jest dodatni

char *wczytajString()
wczytuje napis znak po znaku aż do entera

int is_empty(char *s)
sprawdza czy napis jest pusty

char *wczytajKsiazka(char *s),char *wczytajKlienta(char *s)
wyświetla komunikaty z parametru i korzysta z dwóch poprzednich funkcji i zwraca niepusty napis.

void clear()
usuwa zbędne znaki z bufora klawiatury w szczególności eneter,aby przy pobieraniu napisu nie występowały błędy

void uwolnicKsiazki(struct ksiazki *t),void uwolnicKlientow(struct klienci *t),void uwolnicWyporzyczenia(struct wypozyczenia *w)
usuwa elementy z listy i zwalnia pamięć po zapisaniu danych do pliku

struct ksiazki *wczytajKsiazki(FILE *in_stream, int *max),struct klienci *wczytajKlientow(FILE *in_stream, int *max), struct wypozyczenia *wczytajWypozyczenia(FILE *in_stream, int *max)
te funkcje służą do wczytywaniu kolejnych elementów z pliku i dołączania ich do nowej listy.Zwracają nową listę.
